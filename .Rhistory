ggplot() +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point() +
geom_smooth(aes(method="glm", x = test_res$prob, y = test_res$win))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot() +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point() +
geom_smooth(aes(method="glm", method.args = list(family="binomial") x = test_res$prob, y = test_res$win))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot() +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point() +
geom_smooth(aes(method="glm", method.args = list(family="binomial") x = test_res$prob, y = test_res$win))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot() +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point() +
geom_smooth(aes(method="glm", method.args = list(family="binomial") x = test_res$prob, y = test_res$round))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot() +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point() +
geom_smooth(aes(method="glm", method.args = list(family="binomial"), x = test_res$prob, y = test_res$round))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot() +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point() +
geom_smooth(aes(method="glm", method.args = list(family="binomial"), x = test_res$prob, y = test_res$win))
round
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot() +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point() +
geom_smooth(aes(method="glm", method.args = list(family="binomial"), x = test_res$prob, y = test_res$round))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot(aes(x = test_res$prob, y = test_res$round)) +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point() +
geom_smooth(aes(method="glm", method.args = list(family="binomial")))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot(x = test_res$prob, y = test_res$round) +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point() +
geom_smooth(aes(method="glm", method.args = list(family="binomial")))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot(test_tes, aes(x = prob, y = round)) +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point() +
geom_smooth(aes(method="glm", method.args = list(family="binomial")))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot(test_res, aes(x = prob, y = round)) +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point() +
geom_smooth(aes(method="glm", method.args = list(family="binomial")))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot(test_res, aes(x = round, y = prob)) +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point() +
geom_smooth(aes(method="glm", method.args = list(family="binomial")))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot(test_res, aes(x = round, y = prob)) +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point(colors="magenta") +
geom_smooth(aes(method="glm", method.args = list(family="binomial")))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot(test_res, aes(x = round, y = prob)) +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point(color = 'magenta')) +
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot(test_res, aes(x = round, y = prob)) +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point(color = 'magenta') +
geom_smooth(aes(method="glm", method.args = list(family="binomial")))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot(test_res, aes(x = round, y = prob)) +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point(color = 'magenta', alpha=0.5) +
geom_smooth(aes(method="glm", method.args = list(family="binomial")))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot(test_res, aes(x = round, y = prob)) +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point(color = 'magenta', alpha(0.5)) +
geom_smooth(aes(method="glm", method.args = list(family="binomial")))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot(test_res, aes(x = round, y = prob)) +
xlab("Actual Value") +
ylab("Predicted Value") +
geom_point(color = 'red') +
geom_smooth(aes(method="glm", method.args = list(family="binomial")))
#ggplot() +
#  xlab("Actual Value") +
#  ylab("Predicted Probability") +
#  geom_jitter(aes(x = test_res$win, y = test_res$prob, color='Prediction'))
ggplot(test_res, aes(x = round, y = prob)) +
xlab("Actual Value") +
ylab("Predicted Probability") +
geom_point(color = 'red') +
geom_smooth(aes(method="glm", method.args = list(family="binomial")))
setwd("~/Desktop/Dev/HYU/2023-02/AI-X/project/gamechatban")
clear
setwd("~/Desktop/Dev/HYU/2023-02/AI-X/project/gamechatban") # Change this value to your working dir.
chatlogs <- read.csv("./chatlogs.csv")
# Step 1: Gramatical Expression Removal: Used gsub and REGEX to do such task.
chatlogs$message <- gsub("\\b(?:is|are|&gt|&lt|was|were)\\b", "", chatlogs$message, ignore.case = TRUE)
# Step 1: Gramatical Expression Removal: Used gsub and REGEX to do such task.
chatlogs$message <- gsub("\\b(?:is|are|&gt|&lt|was|were)\\b", "", chatlogs$message, ignore.case = TRUE)
# Step 1: Gramatical Expression Removal: Used gsub and REGEX to do such task.
chatlogs$message <- gsub("\\b(?:is|are|&gt|&lt|was|were)\\b
", "", chatlogs$message, ignore.case = TRUE)
# Step 1: Gramatical Expression Removal: Used gsub and REGEX to do such task.
chatlogs$message <- gsub("\\b(?:is|are|&gt|&lt|was|were)\\b", "", chatlogs$message, ignore.case = TRUE)
# Step 2:  Feature Engineering - Severity
chatlogs$severity <- cut( # Categorize numbers into factors.
chatlogs$case_total_reports,
breaks = c(-Inf, 2, 6, Inf),
labels = c("Severe", "Normal", "Low"),
include.lowest = TRUE
)
# Step 3: Concatenation of Chatlogs
concatenated <- chatlogs %>%
group_by(most_common_report_reason, severity) %>% #Group by following two category
summarise(concatenated_text = paste(message, collapse = " ")) %>%
ungroup()
# Step 3: Concatenation of Chatlogs
concatenated <- chatlogs %>%
group_by(most_common_report_reason, severity) %>% #Group by following two category
summarise(concatenated_text = paste(message, collapse = " ")) %>%
ungroup()
library(dplyr) # R Package: dplyr - advanced filtering and selection
library(tm) # R Package: tm - Text Merging for preprocess of TF-IDF
# Step 3: Concatenation of Chatlogs
concatenated <- chatlogs %>%
group_by(most_common_report_reason, severity) %>% #Group by following two category
summarise(concatenated_text = paste(message, collapse = " ")) %>%
ungroup()
View(concatenated)
# Create a Corpus from the column concatenated_texxt.
corpus <- Corpus(VectorSource(concatenated$concatenated_text))
View(corpus)
View(corpus)
# Additional pre-process of the text in the corpus. (e.g. removing punctuation, stripping whitespaces, etc.)
corpus <- tm_map(corpus, content_transformer(tolower)) # Convert each contents into lower case
corpus <- tm_map(corpus, removePunctuation) # Remove Punctuations
corpus <- tm_map(corpus, removeWords, stopwords("english")) # Remove Additional English stopwords (a, the, etc) that hadn't been filtered.
corpus <- tm_map(corpus, stripWhitespace) # Strip Whitespace
View(corpus)
# Create DTM (Document-Term Matrix) based on the corpus, which is used for TF-IDF
dtm <- DocumentTermMatrix(corpus)
View(dtm)
# Create TF-IDF Matrix based on the DTM.
tf_idf <- weightTfIdf(dtm)
View(tf_idf)
View(dtm)
View(tf_idf)
# Convert TF-IDF matrix into a new data frame for further analysis.
tf_idf_df <- as.data.frame(as.matrix(tf_idf))
View(tf_idf_df)
tf_idf_df$ReportReason <- concatenated$most_common_report_reason
tf_idf_df$Severity <- concatenated$severity
View(tf_idf_df)
print(head(tf_idf_df))
# Make it into csv for further analysis & supervised learning.
write.csv(tf_idf_df, "td_idf.csv")
View(tf_idf_df)
tf_idf_df <- t(as.matrix(tf_idf_df)) # Transpose
View(tf_idf_df)
# Create DTM (Document-Term Matrix) based on the corpus, which is used for TF-IDF
dtm <- DocumentTermMatrix(corpus)
# Create TF-IDF Matrix based on the DTM.
tf_idf <- weightTfIdf(dtm)
tf_idf <- t(as.matrix(tf_idf)) # Transpose
# Convert TF-IDF matrix into a new data frame for further analysis.
tf_idf_df <- as.data.frame(as.matrix(tf_idf))
tf_idf_df$ReportReason <- concatenated$most_common_report_reason
tf_idf_df$ReportReason <- concatenated$most_common_report_reason
View(tf_idf_df)
# Create TF-IDF Matrix based on the DTM.
tf_idf <- weightTfIdf(dtm)
# Convert TF-IDF matrix into a new data frame for further analysis.
tf_idf_df <- as.data.frame(as.matrix(tf_idf))
tf_idf_df$ReportReason <- concatenated$most_common_report_reason
tf_idf_df$Severity <- concatenated$severity
View(tf_idf_df)
# Create TF-IDF Matrix based on the DTM.
tf_idf <- weightTfIdf(dtm)
tf_idf <- t(as.matrix(tf_idf)) # Transpose
# Generate Column name
tf_idf_col_name <- paste(concatenated$most_common_report_reason, concatenated$severity, sep = "_")
# Set the column name of the transposed TF_IDF
colnames(tf_idf) <- tf_idf_col_name
# Convert TF-IDF matrix into a new data frame for further analysis.
tf_idf_df <- as.data.frame(tf_idf)
View(tf_idf_df)
View(tf_idf_df)
View(tf_idf_df)
# AI-X Final Project
# Unsupervised Learning based on TF-IDF
# Dataset: League of Legends Tribunal Chatlogs (Kaggle)
# https://www.kaggle.com/datasets/simshengxue/league-of-legends-tribunal-chatlogs
library(dplyr) # R Package: dplyr - advanced filtering and selection
library(tm) # R Package: tm - Text Mining/Merging for preprocess of TF-IDF, and TF-IDF itself
setwd("~/Desktop/Dev/HYU/2023-02/AI-X/project/gamechatban") # Change this value to your working dir.
chatlogs <- read.csv("./chatlogs.csv")
# Pre-Processing Steps; Feature Engineering Pipeline for the chatlogs.
# 1. Grammatical Expression Removal:
# Remove common grammatical expressions like "is" and "are" to enhance the validity of the analysis.
# 2. Feature Engineering - Severity:
# Introduce a new feature called 'severity' based on the total number of case reports.
# Total case report <= 3: Severe
# Total Case Report >= 4 && <= 6: Normal
# Total Case Report >= 7: Low
# 3. Concatenation of Chatlogs:
# Group chatlogs based on the common reported reason.
# Concatenate chatlogs within each group into a single text.
# 4. Merge into Single Column:
# Merge the concatenated chatlogs into a single column for each common reported reason, considering the newly defined 'severity' feature.
# Step 1: Gramatical Expression Removal: Used gsub and REGEX to do such task.
chatlogs$message <- gsub("\\b(?:is|are|&gt|&lt|was|were)\\b", "", chatlogs$message, ignore.case = TRUE)
# Step 2:  Feature Engineering - Severity
chatlogs$severity <- cut( # Categorize numbers into factors.
chatlogs$case_total_reports,
breaks = c(-Inf, 3, 6, Inf),
labels = c("Severe", "Normal", "Low"),
include.lowest = TRUE
)
# Step 3: Concatenation of Chatlogs
concatenated <- chatlogs %>%
group_by(most_common_report_reason, severity) %>% #Group by following two category
summarise(concatenated_text = paste(message, collapse = " ")) %>%
ungroup()
# Step 4: Merge into Single Column
#merged_data <- concatenated %>%
#  group_by(most_common_report_reason) %>%
#  summarize(merged_text = paste(concatenated_text, collapse = " ")) %>%
#  ungroup()
# TF-IDF (Term-Frequency Inverse Document Frequency) Matrix Anaylsis; Process TF-IDF for each concatenated text to get 'toxiticy level of each words'.
# Create a Corpus from the column concatenated_texxt.
corpus <- Corpus(VectorSource(concatenated$concatenated_text))
# Additional pre-process of the text in the corpus. (e.g. removing punctuation, stripping whitespaces, etc.)
corpus <- tm_map(corpus, content_transformer(tolower)) # Convert each contents into lower case
corpus <- tm_map(corpus, removePunctuation) # Remove Punctuations
corpus <- tm_map(corpus, removeWords, stopwords("english")) # Remove Additional English stopwords (a, the, etc) that hadn't been filtered.
corpus <- tm_map(corpus, stripWhitespace) # Strip Whitespace
# Create DTM (Document-Term Matrix) based on the corpus, which is used for TF-IDF
dtm <- DocumentTermMatrix(corpus)
# Create TF-IDF Matrix based on the DTM.
tf_idf <- weightTfIdf(dtm)
tf_idf <- t(as.matrix(tf_idf)) # Transpose
# Generate Column name
tf_idf_col_name <- paste(concatenated$most_common_report_reason, concatenated$severity, sep = "_")
# Set the column name of the transposed TF_IDF
colnames(tf_idf) <- tf_idf_col_name
# Convert TF-IDF matrix into a new data frame for further analysis.
tf_idf_df <- as.data.frame(tf_idf)
# Make it into csv for further analysis & supervised learning.
write.csv(tf_idf_df, "td_idf.csv")
View(tf_idf_df)
# AI-X Final Project
# Unsupervised Learning based on TF-IDF
# Dataset: League of Legends Tribunal Chatlogs (Kaggle)
# https://www.kaggle.com/datasets/simshengxue/league-of-legends-tribunal-chatlogs
library(dplyr) # R Package: dplyr - advanced filtering and selection
library(tm) # R Package: tm - Text Mining/Merging for preprocess of TF-IDF, and TF-IDF itself
setwd("~/Desktop/Dev/HYU/2023-02/AI-X/project/gamechatban") # Change this value to your working dir.
chatlogs <- read.csv("./chatlogs.csv")
# Pre-Processing Steps; Feature Engineering Pipeline for the chatlogs.
# 1. Grammatical Expression Removal:
# Remove common grammatical expressions like "is" and "are" to enhance the validity of the analysis.
# 2. Feature Engineering - Severity:
# Introduce a new feature called 'severity' based on the total number of case reports.
# Total case report <= 3: Severe
# Total Case Report >= 4 && <= 6: Normal
# Total Case Report >= 7: Low
# 3. Concatenation of Chatlogs:
# Group chatlogs based on the common reported reason.
# Concatenate chatlogs within each group into a single text.
# 4. Merge into Single Column:
# Merge the concatenated chatlogs into a single column for each common reported reason, considering the newly defined 'severity' feature.
# Step 1: Gramatical Expression Removal: Used gsub and REGEX to do such task.
chatlogs$message <- gsub("\\b(?:is|are|&gt|&lt|was|were)\\b", "", chatlogs$message, ignore.case = TRUE)
# Step 2:  Feature Engineering - Severity
chatlogs$severity <- cut( # Categorize numbers into factors.
chatlogs$case_total_reports,
breaks = c(-Inf, 3, 6, Inf),
labels = c("Severe", "Normal", "Low"),
include.lowest = TRUE
)
# Step 3: Concatenation of Chatlogs
concatenated <- chatlogs %>%
group_by(most_common_report_reason, severity) %>% #Group by following two category
summarise(concatenated_text = paste(message, collapse = " ")) %>%
ungroup()
# Step 4: Merge into Single Column
#merged_data <- concatenated %>%
#  group_by(most_common_report_reason) %>%
#  summarize(merged_text = paste(concatenated_text, collapse = " ")) %>%
#  ungroup()
# TF-IDF (Term-Frequency Inverse Document Frequency) Matrix Anaylsis; Process TF-IDF for each concatenated text to get 'toxiticy level of each words'.
# 1. Create a corpus for TF-IDF, pre-process it.
# 2. Create DTM for TF-IDF, and generate TF-IDF matrix
# 3. Transpose it and apply new column name to analyse the reported reason and severity.
# 4. Round the value and multiply weight to get toxic level.
# 5. Export into csv. 'toxicity_lev.csv'
# Create a Corpus from the column concatenated_text.
corpus <- Corpus(VectorSource(concatenated$concatenated_text))
# Additional pre-process of the text in the corpus. (e.g. removing punctuation, stripping whitespaces, etc.)
corpus <- tm_map(corpus, content_transformer(tolower)) # Convert each contents into lower case
corpus <- tm_map(corpus, removePunctuation) # Remove Punctuations
corpus <- tm_map(corpus, removeWords, stopwords("english")) # Remove Additional English stopwords (a, the, etc) that hadn't been filtered.
corpus <- tm_map(corpus, stripWhitespace) # Strip Whitespace
# Create DTM (Document-Term Matrix) based on the corpus, which is used for TF-IDF
dtm <- DocumentTermMatrix(corpus)
# Create TF-IDF Matrix based on the DTM.
tf_idf <- weightTfIdf(dtm)
tf_idf <- t(as.matrix(tf_idf)) # Transpose
# Generate Column name
tf_idf_col_name <- paste(concatenated$most_common_report_reason, concatenated$severity, sep = "_")
# Set the column name of the transposed TF_IDF
colnames(tf_idf) <- tf_idf_col_name
# Round the value, and multiply weights.
tf_idf <- round(tf_idf, 2)
weights <- c(1, 0.6, 0.3)
tf_idf <- round(tf_idf * weights,2)
# Convert TF-IDF matrix into a new data frame for further analysis.
tf_idf_df <- as.data.frame(tf_idf)
# Make it into csv for further analysis & supervised learning.
write.csv(tf_idf_df, "toxicity_lev.csv")
View(tf_idf_df)
View(tf_idf_df)
View(tf_idf_df)
View(tf_idf)
# Create TF-IDF Matrix based on the DTM.
tf_idf <- weightTfIdf(dtm)
tf_idf <- t(as.matrix(tf_idf)) # Transpose
# Generate Column name
tf_idf_col_name <- paste(concatenated$most_common_report_reason, concatenated$severity, sep = "_")
# Set the column name of the transposed TF_IDF
colnames(tf_idf) <- tf_idf_col_name
View(tf_idf)
# Round the value, and multiply weights.
tf_idf <- round(tf_idf, 2)
# Create TF-IDF Matrix based on the DTM.
tf_idf <- weightTfIdf(dtm)
tf_idf <- t(as.matrix(tf_idf)) # Transpose
# Generate Column name
tf_idf_col_name <- paste(concatenated$most_common_report_reason, concatenated$severity, sep = "_")
# Round the value, and multiply weights.
weights <- c(1, 0.6, 0.3)
tf_idf <- tf_idf * weights
# Create DTM (Document-Term Matrix) based on the corpus, which is used for TF-IDF
dtm <- DocumentTermMatrix(corpus)
# Create TF-IDF Matrix based on the DTM.
tf_idf <- weightTfIdf(dtm)
tf_idf <- t(as.matrix(tf_idf)) # Transpose
# Generate Column name
tf_idf_col_name <- paste(concatenated$most_common_report_reason, concatenated$severity, sep = "_")
# Set the column name of the transposed TF_IDF
colnames(tf_idf) <- tf_idf_col_name
# Round the value, and multiply weights.
weights <- c(1, 0.6, 0.3)
tf_idf <- tf_idf * weights
# Create TF-IDF Matrix based on the DTM.
tf_idf <- weightTfIdf(dtm)
tf_idf <- t(as.matrix(tf_idf)) # Transpose
# Generate Column name
tf_idf_col_name <- paste(concatenated$most_common_report_reason, concatenated$severity, sep = "_")
# Set the column name of the transposed TF_IDF
colnames(tf_idf) <- tf_idf_col_name
View(tf_idf)
# Scale up and Round the values
tf_idf = tf_idf * 10000
# Create TF-IDF Matrix based on the DTM.
tf_idf <- weightTfIdf(dtm)
tf_idf <- t(as.matrix(tf_idf)) # Transpose
# Generate Column name
tf_idf_col_name <- paste(concatenated$most_common_report_reason, concatenated$severity, sep = "_")
# Set the column name of the transposed TF_IDF
colnames(tf_idf) <- tf_idf_col_name
# Scale up and Round the values
tf_idf <- round((tf_idf * 10000), 2)
View(concatenated)
# AI-X Final Project
# Unsupervised Learning based on TF-IDF
# Dataset: League of Legends Tribunal Chatlogs (Kaggle)
# https://www.kaggle.com/datasets/simshengxue/league-of-legends-tribunal-chatlogs
library(dplyr) # R Package: dplyr - advanced filtering and selection
library(tm) # R Package: tm - Text Mining/Merging for preprocess of TF-IDF, and TF-IDF itself
setwd("~/Desktop/Dev/HYU/2023-02/AI-X/project/gamechatban") # Change this value to your working dir.
chatlogs <- read.csv("./chatlogs.csv")
# Pre-Processing Steps; Feature Engineering Pipeline for the chatlogs.
# 1. Grammatical Expression Removal:
# Remove common grammatical expressions like "is" and "are" to enhance the validity of the analysis.
# 2. Feature Engineering - Severity:
# Introduce a new feature called 'severity' based on the total number of case reports.
# Total case report <= 3: Severe
# Total Case Report >= 4 && <= 6: Normal
# Total Case Report >= 7: Low
# 3. Concatenation of Chatlogs:
# Group chatlogs based on the common reported reason.
# Concatenate chatlogs within each group into a single text.
# Chatlogs will be merged into a single column for each most common reported reason, considering the newly defined 'severity' feature.
# Step 1: Gramatical Expression Removal: Used gsub and REGEX to do such task.
chatlogs$message <- gsub("\\b(?:is|are|&gt|&lt|was|were)\\b", "", chatlogs$message, ignore.case = TRUE)
# Step 2:  Feature Engineering - Severity
chatlogs$severity <- cut( # Categorize numbers into factors.
chatlogs$case_total_reports,
breaks = c(-Inf, 3, 6, Inf),
labels = c("Severe", "Normal", "Low"),
include.lowest = TRUE
)
# Step 3: Concatenation of Chatlogs
concatenated <- chatlogs %>%
group_by(most_common_report_reason, severity) %>% #Group by following two category
summarise(concatenated_text = paste(message, collapse = " ")) %>%
ungroup()
# TF-IDF (Term-Frequency Inverse Document Frequency) Matrix Anaylsis; Process TF-IDF for each concatenated text to get 'toxiticy level of each words'.
# 1. Create a corpus for TF-IDF, pre-process it.
# 2. Create DTM for TF-IDF, and generate TF-IDF matrix
# 3. Transpose it and apply new column name to analyse the reported reason and severity.
# 4. Scale Up and round the value to get toxic level.
# 5. Export into csv. 'toxicity_lev.csv'
# Create a Corpus from the column concatenated_text.
corpus <- Corpus(VectorSource(concatenated$concatenated_text))
# Additional pre-process of the text in the corpus. (e.g. removing punctuation, stripping whitespaces, etc.)
corpus <- tm_map(corpus, content_transformer(tolower)) # Convert each contents into lower case
corpus <- tm_map(corpus, removePunctuation) # Remove Punctuations
corpus <- tm_map(corpus, removeWords, stopwords("english")) # Remove Additional English stopwords (a, the, etc) that hadn't been filtered.
corpus <- tm_map(corpus, stripWhitespace) # Strip Whitespace
# Create DTM (Document-Term Matrix) based on the corpus, which is used for TF-IDF
dtm <- DocumentTermMatrix(corpus)
# Create TF-IDF Matrix based on the DTM.
tf_idf <- weightTfIdf(dtm)
tf_idf <- t(as.matrix(tf_idf)) # Transpose
# Generate Column name
tf_idf_col_name <- paste(concatenated$most_common_report_reason, concatenated$severity, sep = "_")
# Set the column name of the transposed TF_IDF
colnames(tf_idf) <- tf_idf_col_name
# Scale up and Round the values
tf_idf <- round((tf_idf * 10000), 2)
# Convert TF-IDF matrix into a new data frame for further analysis.
tf_idf_df <- as.data.frame(tf_idf)
# Make it into csv for further analysis & supervised learning.
write.csv(tf_idf_df, "toxicity_lev.csv")
